/*
 * nextflow.config - Main configuration file
 */

// Global default params
params {
    config_profile_description = 'Single-cell RNA-seq analysis pipeline'
    config_profile_contact = 'your.email@institution.edu'
    config_profile_url = 'https://github.com/yourusername/scrna-pipeline'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    
    slurm {
        process.executor = 'slurm'
        process.queue = 'normal'
        includeConfig 'conf/slurm.config'
    }
    
    lsf {
        process.executor = 'lsf'
        includeConfig 'conf/lsf.config'
    }
    
    sge {
        process.executor = 'sge'
        includeConfig 'conf/sge.config'
    }
    
    test {
        includeConfig 'conf/test.config'
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with conda package
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = 'scrna-seq-pipeline'
    author          = 'Your Name'
    homePage        = 'https://github.com/yourusername/scrna-pipeline'
    description     = 'Single-cell RNA-seq analysis pipeline with Cell Ranger and Seurat'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

/*
 * conf/base.config - Base configuration for process resource allocation
 */

process {
    // Default resource requirements
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

    // Software-specific resource requirements
    withName:CELLRANGER_COUNT {
        cpus   = { check_max( params.localcores as int, 'cpus' ) }
        memory = { check_max( params.localmem.GB, 'memory' ) }
        time   = { check_max( 24.h * task.attempt, 'time' ) }
    }
    
    withName:SEURAT_INTEGRATION {
        cpus   = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time   = { check_max( 12.h * task.attempt, 'time' ) }
    }
}

/*
 * conf/slurm.config - SLURM cluster configuration
 */

process {
    executor = 'slurm'
    queue = 'normal'
    
    // SLURM-specific settings
    clusterOptions = '--account=your_account'
    
    // Process-specific SLURM settings
    withName:CELLRANGER_COUNT {
        queue = 'high-memory'
        clusterOptions = '--account=your_account --partition=high-memory'
    }
    
    withName:SEURAT_INTEGRATION {
        queue = 'high-memory'
        clusterOptions = '--account=your_account --partition=high-memory'
    }
}

/*
 * conf/test.config - Test configuration with small dataset
 */

params {
    config_profile_name        = 'Test profile'
    config_profile_description = 'Minimal test dataset to check pipeline function'

    // Limit resources so that this can run on GitHub Actions
    max_cpus   = 2
    max_memory = 6.GB
    max_time   = 6.h

    // Test data
    samplesheet = 'https://github.com/yourusername/scrna-pipeline/raw/main/assets/test_samplesheet.csv'
    reference_genome = 'https://github.com/yourusername/scrna-pipeline/raw/main/assets/test_reference.tar.gz'
    
    // Reduced parameters for testing
    expect_cells = 1000
    localcores = 2
    localmem = 6
}

/*
 * Environment modules configuration
 */

env {
    // Cell Ranger environment
    CELLRANGER_PATH = '/path/to/cellranger'
    
    // R environment
    R_LIBS_USER = '$HOME/R/library'
    
    // Prevent locale issues
    LC_ALL = 'C'
    LANG = 'C'
}

// Software containers/environments
process {
    // Cell Ranger container (if using Docker/Singularity)
    withName:CELLRANGER_COUNT {
        if (workflow.containerEngine == 'docker') {
            container = 'litd/docker-cellranger:v6.1.2'
        } else if (workflow.containerEngine == 'singularity') {
            container = 'docker://litd/docker-cellranger:v6.1.2'
        }
    }
    
    
// R/Seurat container
    withName:'SEURAT_.*' {
        if (workflow.containerEngine == 'docker') {
            container = 'rocker/r-ver:4.2.0'
        } else if (workflow.containerEngine == 'singularity') {
            container = 'docker://rocker/r-ver:4.2.0'
        }
    }
    
    withName:GENERATE_REPORT {
        if (workflow.containerEngine == 'docker') {
            container = 'rocker/r-ver:4.2.0'
        } else if (workflow.containerEngine == 'singularity') {
            container = 'docker://rocker/r-ver:4.2.0'
        }
    }
}
